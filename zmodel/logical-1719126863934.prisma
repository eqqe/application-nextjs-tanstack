//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum ProfileRole {
  USER
  ADMIN
  GUEST
}

enum Type {
  SubTabFolder
  Grid
  Property
  Lease
  Payment
  LeaseTenant
  Charge
  Person
  User
  Profile
  PropertyTenancy
  PropertyTenancyInCommon
  PropertyTenancyInCommonTenant
  PropertyJointTenancy
  PropertyTenancyByEntirety
  Corporation
}

enum PropertyType {
  APARTMENT
  HOUSE
  COMMERCIAL
}

enum PropertyTenancyType {
  InCommon
  Joint
  ByEntirety
}

enum ChargeType {
  MAINTENANCE
  UTILITIES
  TAXES
  OTHER
}

enum LeaseType {
  Protected
  Commercial
  Furnished
  Professional
  Seasonal
  OtherLease
}

enum LeaseDurationType {
  OneYear
  TwoYears
  ThreeYears
  SixYears
  NineYears
  OtherDuration
}

enum LeasePeriodicityType {
  Monthly
  Quarterly
  Yearly
  OtherPeriodicity
}

enum LeaseQuaterlyPeriodicityType {
  JanuaryAprilJulyOctober
  FebruaryMayAugustNovember
  MarchJuneSeptemberDecember
}

enum LeasePaymentType {
  Advance
  Arrears
}

enum LeasePaymentMode {
  Cheque
  WireTransfer
  DirectDebit
  Card
  OtherPayment
  Cash
}

enum LeaseTenantType {
  Corporation
  Person
}

enum GridElementType {
  Card
  Tabs
}

enum IconName {
  FolderKey
  SquareUser
  User
  Users
  Home
  Gauge
}

enum TypeTableRequest {
  Aggregate
  GroupBy
  FindMany
}

enum ChartType {
  BarChart
  PieChart
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
/// @@allow('read', users?[user.id == auth().id] && (role == ADMIN || role == USER))
/// @@allow('create,update,delete', spaces![profiles?[users?[user.id == auth().id] && role == ADMIN]])
model Profile {
  owner     User          @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String        @default("")
  id        String        @id() @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt()
  spaces    Space[]
  users     ProfileUser[]
  role      ProfileRole
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
/// @@allow('read', profile.users?[user.id == auth().id] && (profile.role == ADMIN || profile.role == USER))
/// @@allow('create,update,delete', profile.spaces![profiles?[users?[user.id == auth().id] && role == ADMIN]])
model ProfileUser {
  owner     User     @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String   @default("")
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  user      User     @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

/// @@allow('read', profiles?[profile.users?[user.id == auth().id] && (profile.role == ADMIN || profile.role == USER)])
/// @@allow('all', auth() == this)
model User {
  id                                  String                          @id() @default(uuid())
  createdAt                           DateTime                        @default(now())
  updatedAt                           DateTime                        @updatedAt()
  /// @email
  email                               String                          @unique()
  emailVerified                       DateTime?
  /// @password
  /// @omit
  password                            String?
  name                                String?
  profiles                            ProfileUser[]                   @relation("user")
  spacesOwned                         Space[]                         @relation("owner")
  createSpaceId                       String?                         @ignore()
  selectedSpaces                      String[]                        @ignore()
  /// @url
  image                               String?
  tenantsOwned                        LeaseTenant[]                   @relation("owner")
  leases                              Lease[]                         @relation("owner")
  properties                          Property[]                      @relation("owner")
  payments                            Payment[]                       @relation("owner")
  profilesOwned                       Profile[]                       @relation("owner")
  profileUsersOwned                   ProfileUser[]                   @relation("owner")
  charges                             Charge[]                        @relation("owner")
  persons                             Person[]                        @relation("user")
  propertyTenancyInCommonOwned        PropertyTenancyInCommon[]       @relation("owner")
  personOwned                         Person[]                        @relation("owner")
  propertyTenancyOwned                PropertyTenancy[]               @relation("owner")
  propertyTenancyInCommonTenantsOwned PropertyTenancyInCommonTenant[] @relation("owner")
  propertyJointTenancyTenantsOwned    PropertyJointTenancyTenant[]    @relation("owner")
  propertyJointTenancies              PropertyJointTenancy[]          @relation("owner")
  propertyTenanciesByEntiretyOwned    PropertyTenancyByEntirety[]     @relation("owner")
  corporations                        Corporation[]                   @relation("owner")
  leaseMailOtherAddresses             LeaseMailOtherAddress[]         @relation("owner")
  accounts                            Account[]
}

model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

/// @@deny('all', auth() == null)
/// @@allow('read', spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)])
/// @@allow('create,update,delete', spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && role == ADMIN])
model SpaceApplicationVersion {
  id                   String             @id() @default(uuid())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt()
  space                Space              @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId              String             @default("")
  applicationVersion   ApplicationVersion @relation(fields: [applicationVersionId], references: [id], onDelete: Cascade)
  applicationVersionId String

  @@unique([spaceId, applicationVersionId])
}

/// @@deny('all', auth() == null)
/// @@allow('read', auth() != null)
model Application {
  id        String               @id() @default(uuid())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt()
  /// @regex('^[0-9a-zA-Z]{4,16}$')
  slug      String               @unique()
  versions  ApplicationVersion[]
}

/// @@deny('all', auth() == null)
/// @@allow('read', auth() != null)
model ApplicationVersion {
  id              String                     @id() @default(uuid())
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt()
  application     Application                @relation(fields: [applicationSlug], references: [slug], onDelete: Cascade)
  applicationSlug String
  versionMajor    Int
  versionMinor    Int
  activations     SpaceApplicationVersion[]
  folders         FolderApplicationVersion[]

  @@unique([applicationSlug, versionMinor, versionMajor])
}

/// @@deny('all', auth() == null)
/// @@allow('read', applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model FolderApplicationVersion {
  id                   String             @id() @default(uuid())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt()
  applicationVersion   ApplicationVersion @relation(fields: [applicationVersionId], references: [id], onDelete: Cascade)
  applicationVersionId String
  tabs                 TabFolder[]
  path                 String
}

/// @@deny('all', auth() == null)
/// @@allow('read', folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model TabFolder {
  id        String                   @id() @default(uuid())
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt()
  folder    FolderApplicationVersion @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId  String
  subTabs   SubTabFolder[]
}

/// @@deny('all', auth() == null)
/// @@allow('read', tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model SubTabFolder {
  /// @length(2, 150)
  name      String
  id        String    @id() @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  tab       TabFolder @relation(fields: [tabId], references: [id], onDelete: Cascade)
  tabId     String
  grids     Grid[]
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
/// @@allow('create', auth() != null)
/// @@allow('read', profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)])
/// @@allow('update,delete', profiles?[users?[user.id == auth().id] && role == ADMIN])
model Space {
  /// @length(2, 150)
  name         String
  owner        User                      @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String                    @default("")
  id           String                    @id() @default(uuid())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt()
  profiles     Profile[]
  applications SpaceApplicationVersion[]
  properties   Property[]

  @@unique([name, ownerId])
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
/// @@allow('read', spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)])
/// @@deny('all', private && owner != auth())
/// @@allow('all', spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)])
model Property {
  /// @length(2, 150)
  name          String
  owner         User             @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String           @default("")
  id            String           @id() @default(uuid())
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt()
  space         Space            @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId       String           @default("")
  private       Boolean          @default(false)
  streetAddress String
  city          String
  postalCode    String
  country       String
  state         String?
  propertyType  PropertyType
  leases        Lease[]
  surface       Int
  charges       Charge[]
  tenancy       PropertyTenancy? @relation(fields: [tenancyId], references: [id], onDelete: Cascade)
  tenancyId     String?
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
/// @@allow('all', properties?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model PropertyTenancy {
  owner               User                       @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId             String                     @default("")
  id                  String                     @id() @default(uuid())
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt()
  /// @length(2, 150)
  name                String
  properties          Property[]
  type                PropertyTenancyType
  tenancyInCommon     PropertyTenancyInCommon?   @relation(fields: [tenancyInCommonId], references: [id], onDelete: Cascade)
  tenancyInCommonId   String?                    @unique()
  jointTenancy        PropertyJointTenancy?      @relation(fields: [jointTenancyId], references: [id], onDelete: Cascade)
  jointTenancyId      String?                    @unique()
  tenancyByEntirety   PropertyTenancyByEntirety? @relation(fields: [tenancyByEntiretyId], references: [id], onDelete: Cascade)
  tenancyByEntiretyId String?                    @unique()
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
/// @@deny('all', property.private && property.owner != auth())
/// @@allow('all', property.spaceId in auth().selectedSpaces && property.space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)])
model Charge {
  owner       User       @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String     @default("")
  id          String     @id() @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt()
  property    Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
  lease       Lease?     @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  leaseId     String?
  chargeType  ChargeType
  amount      Int
  dueDate     DateTime
  description String?
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
/// @@allow('all', propertyTenancy.properties?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
/// @@allow('all', propertyTenancy.properties?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model PropertyTenancyInCommon {
  owner             User                            @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           String                          @default("")
  id                String                          @id() @default(uuid())
  createdAt         DateTime                        @default(now())
  updatedAt         DateTime                        @updatedAt()
  propertyTenancy   PropertyTenancy?
  streetAddress     String
  city              String
  postalCode        String
  country           String
  state             String?
  siret             String?
  siren             String?
  codeNafApe        String?
  rcs               String?
  lei               String?
  intraCommunityVAT String?
  tenants           PropertyTenancyInCommonTenant[]
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
/// @@allow('all', propertyTenancy.properties?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
/// @@allow('all', propertyTenancy.properties?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model PropertyJointTenancy {
  owner           User                         @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String                       @default("")
  id              String                       @id() @default(uuid())
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt()
  propertyTenancy PropertyTenancy?
  tenants         PropertyJointTenancyTenant[]
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
/// @@allow('all', propertyTenancy.properties?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
/// @@allow('all', propertyTenancy.properties?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model PropertyTenancyByEntirety {
  owner           User             @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String           @default("")
  id              String           @id() @default(uuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt()
  propertyTenancy PropertyTenancy?
  person          Person           @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId        String
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
/// @@allow('all', propertyTenancyInCommon.propertyTenancy.properties?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model PropertyTenancyInCommonTenant {
  owner                     User                    @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId                   String                  @default("")
  id                        String                  @id() @default(uuid())
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt()
  person                    Person                  @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId                  String
  propertyTenancyInCommon   PropertyTenancyInCommon @relation(fields: [propertyTenancyInCommonId], references: [id], onDelete: Cascade)
  propertyTenancyInCommonId String
  entryDate                 DateTime
  exitDate                  DateTime?
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
/// @@allow('all', propertyJointTenancy.propertyTenancy.properties?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model PropertyJointTenancyTenant {
  owner                  User                 @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId                String               @default("")
  id                     String               @id() @default(uuid())
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt()
  person                 Person               @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId               String
  propertyJointTenancy   PropertyJointTenancy @relation(fields: [propertyJointTenancyId], references: [id], onDelete: Cascade)
  propertyJointTenancyId String
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
/// @@allow('all', leaseTenancies?[lease.property.spaceId in auth().selectedSpaces && lease.property.space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
/// @@allow('all', inCommonTenancies?[propertyTenancyInCommon.propertyTenancy.properties?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]]])
/// @@allow('all', jointTenancies?[propertyJointTenancy.propertyTenancy.properties?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]]])
/// @@allow('all', entireTenancies?[propertyTenancy.properties?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]]])
/// @@allow('all', corporations?[leaseTenants?[lease.property.spaceId in auth().selectedSpaces && lease.property.space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]]])
model Person {
  user              User?                           @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  userId            String?
  owner             User                            @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           String                          @default("")
  id                String                          @id() @default(uuid())
  createdAt         DateTime                        @default(now())
  updatedAt         DateTime                        @updatedAt()
  birthDate         DateTime
  phone             String?
  leaseTenancies    LeaseTenant[]
  inCommonTenancies PropertyTenancyInCommonTenant[]
  jointTenancies    PropertyJointTenancyTenant[]
  entireTenancies   PropertyTenancyByEntirety[]
  corporations      Corporation[]
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
/// @@deny('all', property.private && property.owner != auth())
/// @@allow('all', property.spaceId in auth().selectedSpaces && property.space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)])
/// @@allow('read', property.spaceId in auth().selectedSpaces && tenants?[person.user == auth()] && property.space.profiles?[users?[user.id == auth().id] && role == GUEST])
model Lease {
  owner               User                          @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId             String                        @default("")
  id                  String                        @id() @default(uuid())
  createdAt           DateTime                      @default(now())
  updatedAt           DateTime                      @updatedAt()
  property            Property                      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId          String
  startDate           DateTime
  endDate             DateTime?
  type                LeaseType
  duration            LeaseDurationType
  rentAmount          Int
  periodicity         LeasePeriodicityType
  quaterlyPeriodicity LeaseQuaterlyPeriodicityType?
  paymentType         LeasePaymentType
  paymentMode         LeasePaymentMode
  iban                String?
  mailOtherAddresses  LeaseMailOtherAddress[]
  notes               String?
  payments            Payment[]
  charges             Charge[]
  tenants             LeaseTenant[]
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
/// @@deny('all', lease.property.private && lease.property.owner != auth())
/// @@allow('all', lease.property.spaceId in auth().selectedSpaces && lease.property.space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)])
model LeaseTenant {
  owner         User            @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String          @default("")
  id            String          @id() @default(uuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt()
  lease         Lease           @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  leaseId       String
  tenantType    LeaseTenantType
  person        Person?         @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId      String?
  corporation   Corporation?    @relation(fields: [corporationId], references: [id], onDelete: Cascade)
  corporationId String?
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
model Corporation {
  streetAddress String
  city          String
  postalCode    String
  country       String
  state         String?
  owner         User          @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String        @default("")
  id            String        @id() @default(uuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt()
  members       Person[]
  leaseTenants  LeaseTenant[]
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
/// @@deny('all', lease.property.private && lease.property.owner != auth())
/// @@allow('all', lease.property.spaceId in auth().selectedSpaces && lease.property.space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)])
model Payment {
  owner     User     @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String   @default("")
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  lease     Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  leaseId   String
  amount    Int
  date      DateTime
}

/// @@deny('update', future().owner != owner)
/// @@deny('all', auth() == null)
/// @@deny('all', lease.property.private && lease.property.owner != auth())
/// @@allow('all', lease.property.spaceId in auth().selectedSpaces && lease.property.space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)])
model LeaseMailOtherAddress {
  streetAddress String
  city          String
  postalCode    String
  country       String
  state         String?
  owner         User     @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String   @default("")
  id            String   @id() @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()
  lease         Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  leaseId       String
}

/// @@deny('all', auth() == null)
/// @@allow('read', subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model Grid {
  icon      IconName?
  /// @length(2, 150)
  name      String
  id        String        @id() @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt()
  elements  GridElement[]
  subTab    SubTabFolder  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String
  /// @gte(1)
  /// @lte(12)
  columns   Int
}

/// @@deny('all', auth() == null)
/// @@allow('read', grid.subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
/// @@allow('read', gridTabContent.tabs.element.grid.subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model GridElement {
  id               String          @id() @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt()
  grid             Grid?           @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId         String?
  gridTabContent   GridTabContent? @relation(fields: [gridTabContentId], references: [id], onDelete: Cascade)
  gridTabContentId String?
  type             GridElementType
  /// @gte(1)
  /// @lte(12)
  colSpan          Int?
  /// @gte(1)
  /// @lte(12)
  rowStart         Int?
  /// @gte(1)
  /// @lte(12)
  rowEnd           Int?
  /// @gte(1)
  /// @lte(12)
  colStart         Int?
  /// @gte(1)
  /// @lte(12)
  colEnd           Int?
  card             GridCard?
  tabs             GridTabs?
}

/// @@deny('all', auth() == null)
/// @@allow('read', element.grid.subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
/// @@allow('read', element.gridTabContent.tabs.element.grid.subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model GridCard {
  icon                   IconName?
  id                     String          @id() @default(uuid())
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt()
  element                GridElement     @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId               String          @unique()
  title                  String
  /// @gte(1)
  /// @lte(4)
  titleXl                Int?
  description            String
  invertTitleDescription Boolean         @default(false)
  /// @gte(1)
  /// @lte(6)
  headerPb               Int             @default(2)
  content                String?
  count                  Type?
  table                  GridCardTable?
  footer                 GridCardFooter?
}

/// @@deny('all', auth() == null)
/// @@allow('read', element.grid.subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model GridTabs {
  id          String           @id() @default(uuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt()
  element     GridElement      @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId    String           @unique()
  tabsContent GridTabContent[]
}

/// @@deny('all', auth() == null)
/// @@allow('read', tabs.element.grid.subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
/// @@allow('read', tabs.element.gridTabContent.tabs.element.grid.subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model GridTabContent {
  /// @length(2, 150)
  name      String
  id        String        @id() @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt()
  elements  GridElement[]
  tabs      GridTabs      @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String
}

/// @@deny('all', auth() == null)
/// @@allow('read', card.element.grid.subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model GridCardFooter {
  id        String                  @id() @default(uuid())
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt()
  card      GridCard                @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String                  @unique()
  button    GridCardFooterButton?
  progress  GridCardFooterProgress?
}

/// @@deny('all', auth() == null)
/// @@allow('read', footer.card.element.grid.subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model GridCardFooterButton {
  id        String         @id() @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt()
  footer    GridCardFooter @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String         @unique()
  text      String
  table     Type
}

/// @@deny('all', auth() == null)
/// @@allow('read', footer.card.element.grid.subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model GridCardFooterProgress {
  id        String         @id() @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt()
  footer    GridCardFooter @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String         @unique()
  value     Int
}

/// @@deny('all', auth() == null)
/// @@allow('read', parent.element.grid.subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
/// @@allow('read', parent.element.gridTabContent.tabs.element.grid.subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model GridCardTable {
  id               String           @id() @default(uuid())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt()
  parent           GridCard         @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId         String           @unique()
  type             Type
  typeTableRequest TypeTableRequest
  columns          String[]
  groupBy          GroupBy?
  chart            Chart?
}

/// @@deny('all', auth() == null)
/// @@allow('read', parent.parent.element.grid.subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
/// @@allow('read', parent.parent.element.gridTabContent.tabs.element.grid.subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model GroupBy {
  id        String        @id() @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt()
  parent    GridCardTable @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String        @unique()
  fields    String[]
  sum       String[]
  count     String[]
  avg       String[]
  min       String[]
  max       String[]
  orderBy   String?
}

/// @@deny('all', auth() == null)
/// @@allow('read', parent.parent.element.grid.subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
/// @@allow('read', parent.parent.element.gridTabContent.tabs.element.grid.subTab.tab.folder.applicationVersion.activations?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
model Chart {
  id        String        @id() @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt()
  parent    GridCardTable @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String        @unique()
  type      ChartType
}
