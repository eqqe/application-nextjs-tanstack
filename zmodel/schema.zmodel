import "application"
import "space/space"
import "space/dashboard/dashboard"
import "space/property/property"
import "space/list/list"
import "space/view/view"

datasource db {
    provider = 'postgresql'
    url = env('POSTGRES_URL')
    directUrl = env('POSTGRES_URL_NON_POOLING')
}

generator js {
    provider = 'prisma-client-js'
}

plugin enhancer {
    provider = '@core/enhancer'
    generatePermissionChecker = true
}

plugin zod {
  provider = '@core/zod'
}

plugin hooks {
    provider = '@zenstackhq/tanstack-query'
    output = 'lib/hooks'
    target = 'react'
    version = 'v5'
}




abstract model IdCreatedUpdated
{
    id        String      @id @default(uuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}
abstract model IdCreatedUpdatedAuth extends IdCreatedUpdated
{
    @@deny('all', auth() == null)
}

abstract model IdCreatedUpdatedSpace extends IdCreatedUpdatedAuth {
    space     Space         @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId   String        @default(auth().currentSpaceId)

    @@allow('read', auth().currentSpace == space && space.members?[user == auth()])
}
enum SpaceUserRole {
    USER
    ADMIN
}

model SpaceUser extends IdCreatedUpdatedAuth {

    space     Space         @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId   String       

    @@allow('read', auth().currentSpace == space && space.members?[user == auth()])



    user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    role      SpaceUserRole
    @@unique([userId, spaceId])

    // space admin can create/update/delete
    @@allow('create,update,delete', space.members?[user == auth() && role == ADMIN])
}

model User extends IdCreatedUpdated {
    email         String      @unique @email
    emailVerified DateTime?
    password      String?     @password @omit
    name          String?
    spaces        SpaceUser[]
    currentSpace          Space?         @relation(fields: [currentSpaceId], references: [id], onDelete: Cascade)
    currentSpaceId        String?
    image         String?     @url
    todos         Todo[]
    

    leases        Lease[]
    dashboards  Dashboard[]
    properties  Property[]
    lists  List[]
    payments      Payment[]

    tables      Table[]
    charges         Charge[]
    panelRows         PanelRow[]
    panels           Panel[]
    panelComponents     PanelComponent[]
    panelComponentsCounter     PanelComponentCounter[]
    panelComponentsReport     PanelComponentReport[]
    
    // next-auth
    accounts      Account[]

    // can be created by anyone, even not logged in
    @@allow('create', true)

    // can be read by users sharing any space
    @@allow('read', spaces?[auth().currentSpace == space && space.members?[user == auth()]])

    // full access by oneself
    @@allow('all', auth() == this)
}

abstract model Owner {
    owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId   String   @default(auth().id)
    @@deny('update', future().owner != owner)
}



abstract model Component extends IdCreatedUpdatedAuth, Owner {

}
enum Type {
    List
    Todo
    Dashboard
    Property
}

model Table extends Component {
    type Type

    list List?
    todo Todo?
    dashboard Dashboard?
    property Property?

    @@allow('all', owner == auth())
}

// next-auth
model Account {
    id                       String  @id @default(uuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    refresh_token_expires_in Int?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

