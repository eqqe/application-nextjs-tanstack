
import "../../base"
import "../space"
import "tenancy"
import "lease"

enum PropertyType {
    APARTMENT
    HOUSE
    COMMERCIAL
}

abstract model Address {
    streetAddress String
    city          String
    postalCode    String
    country       String
    state         String?
}


model Property extends Address, SpaceComponent {
    propertyType PropertyType
    leases       Lease[]
    surface      Int
    charges      Charge[]
    tenancy      PropertyTenancy? @relation(fields: [tenancyId], references: [id], onDelete: Cascade)
    tenancyId    String?
}

model PropertyTenancy extends Named, Component {
    properties          Property[]

    type                String

    tenancyInCommon     PropertyTenancyInCommon?   @relation(fields: [tenancyInCommonId], references: [id], onDelete: Cascade)
    tenancyInCommonId   String?                    @unique

    jointTenancy        PropertyJointTenancy?      @relation(fields: [jointTenancyId], references: [id], onDelete: Cascade)
    jointTenancyId      String?                    @unique


    tenancyByEntirety   PropertyTenancyByEntirety? @relation(fields: [tenancyByEntiretyId], references: [id], onDelete: Cascade)
    tenancyByEntiretyId String?                    @unique

    @@form.polymorphism(typeField: type, parentField: properties)
    @@allow('all', properties?[spaceId in auth().selectedSpaces && space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)]])
}

abstract model PropertyComponent extends Component {

    property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    propertyId String


    @@deny('all', property.private && property.owner != auth())
    @@allow('all', property.spaceId in auth().selectedSpaces && property.space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)])
}


enum ChargeType {
    MAINTENANCE
    UTILITIES
    TAXES
    OTHER
}
model Charge  extends PropertyComponent {
    lease       Lease?     @relation(fields: [leaseId], references: [id], onDelete: Cascade)
    leaseId     String?
    chargeType  ChargeType
    amount      Int
    dueDate     DateTime
    description String?
}
