
import "../../schema.zmodel"
import "../space.zmodel"
import "property"
import "tenancy"
import "../person/person"


enum LeaseType {
    Protected
    Commercial
    Furnished
    Professional
    Seasonal
    Other
}

enum LeaseDurationType {
    OneYear
    TwoYears
    ThreeYears
    SixYears
    NineYears
    OtherDuration
}

enum LeasePeriodicityType {
    Monthly
    Quarterly
    Yearly
    OtherPeriodicity
}


enum LeaseQuaterlyPeriodicityType {
    JanuaryAprilJulyOctober
    FebruaryMayAugustNovember
    MarchJuneSeptemberDecember
}

enum LeasePaymentType {
    Advance
    Arrears
}

enum LeasePaymentMode {
    Cheque
    WireTransfer
    DirectDebit
    Card
    Other
    Cash
}


model Lease extends PropertyComponent {
    startDate           DateTime
    endDate             DateTime?
    type                LeaseType
    duration            LeaseDurationType
    rentAmount          Int
    periodicity         LeasePeriodicityType
    quaterlyPeriodicity LeaseQuaterlyPeriodicityType?

    paymentType         LeasePaymentType
    paymentMode         LeasePaymentMode

    iban                String?

    mailOtherAddresses  LeaseMailOtherAddress[]



    notes               String?
    payments            Payment[]
    charges             Charge[]
    tenants             LeaseTenant[]
    @@allow('read', property.spaceId in auth().selectedSpaces && tenants?[person.user == auth()] && property.space.profiles?[users?[user.id == auth().id] && role == GUEST] )
}

abstract model LeaseComponent extends Component {

    lease   Lease  @relation(fields: [leaseId], references: [id], onDelete: Cascade)
    leaseId String

    @@deny('all', lease.property.private && lease.property.owner != auth())
    @@allow('all', lease.property.spaceId in auth().selectedSpaces && lease.property.space.profiles?[users?[user.id == auth().id] && (role == ADMIN || role == USER)])
}

enum LeaseTenantType {
    Corporation
    Person
}
model LeaseTenant extends LeaseComponent {
    tenantType    LeaseTenantType

    person        Person?         @relation(fields: [personId], references: [id], onDelete: Cascade)
    personId      String?

    corporation   Corporation?    @relation(fields: [corporationId], references: [id], onDelete: Cascade)
    corporationId String?
}

model Corporation extends Component, Address {
    members      Person[]
    leaseTenants LeaseTenant[]
}

model Payment extends LeaseComponent {
    amount Int
    date   DateTime
}
model LeaseMailOtherAddress extends LeaseComponent, Address {
}
