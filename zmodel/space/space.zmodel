import "../schema"
import "../application"
import "dashboard/dashboard"
import "property/property"
import "list/list"
import "view/view"

model Space extends IdCreatedUpdatedAuth {
    name      String      @length(4, 50)
    members   SpaceUser[]
    applications SpaceApplicationVersion[]
    dashboards Dashboard[]
    properties Property[]
    lists List[]
    viewed User[]

    // everyone can create a space
    @@allow('create', true)

    // any user in the space can read the space
    @@allow('read', members?[user == auth()])

    // space admin can update and delete
    @@allow('update,delete', members?[user == auth() && role == ADMIN])
}


abstract model HasTable {
        table        Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)
    tableId      String @unique
}

abstract model TableComponent extends HasTable, Component
{}

abstract model SpaceComponent extends IdCreatedUpdatedSpace, Owner, HasTable {
    private   Boolean  @default(false)
    name     String   @length(1, 100)





    @@deny('read', private && owner != auth())

    // when create, owner must be set to current user, and user must be in the space
    @@allow('create', owner == auth() && auth().currentSpace == space && space.members?[user == auth()])

    // when create, owner must be set to current user, and user must be in the space
    @@allow('update', owner == auth() && auth().currentSpace == space && space.members?[user == auth()])

    // can be deleted by owner
    @@allow('delete', owner == auth())
}


