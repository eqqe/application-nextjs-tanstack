/*
* Sample model for a collaborative Todo app
*/

/*
 * Data source definition
 */
datasource db {
    provider = 'postgresql'
    url = env('POSTGRES_URL')
    directUrl = env('POSTGRES_URL_NON_POOLING')
}

generator js {
    provider = 'prisma-client-js'
}

plugin enhancer {
    provider = '@core/enhancer'
    generatePermissionChecker = true
}

plugin hooks {
    provider = '@zenstackhq/tanstack-query'
    output = 'lib/hooks'
    target = 'react'
    version = 'v5'
}

/*
 * Enum for user's role in a space
 */
enum SpaceUserRole {
    USER
    ADMIN
}

/*
 * Enum for property types
 */
enum PropertyType {
    APARTMENT
    HOUSE
    COMMERCIAL
}

/*
 * Enum for charge types
 */
enum ChargeType {
    MAINTENANCE
    UTILITIES
    TAXES
    OTHER
}
abstract model IdCreatedUpdated
{
    id        String      @id @default(uuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}
abstract model IdCreatedUpdatedAuth extends IdCreatedUpdated
{
    @@deny('all', auth() == null)
}
/*
 * Model for a space in which users can collaborate on Lists and Todos
 */
model Space extends IdCreatedUpdatedAuth {
    name      String      @length(4, 50)
    slug      String      @unique @regex('^[0-9a-zA-Z]{4,16}$')
    members   SpaceUser[]
    lists     List[]
    properties Property[]
    dashboards Dashboard[]

    // everyone can create a space
    @@allow('create', true)

    // any user in the space can read the space
    @@allow('read', members?[user == auth()])

    // space admin can update and delete
    @@allow('update,delete', members?[user == auth() && role == ADMIN])
}

abstract model IdCreatedUpdatedSpace extends IdCreatedUpdatedAuth {
    space     Space         @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId   String

    @@allow('read', space.members?[user == auth()])
}
model SpaceUser extends IdCreatedUpdatedSpace {
    user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    role      SpaceUserRole
    @@unique([userId, spaceId])

    // space admin can create/update/delete
    @@allow('create,update,delete', space.members?[user == auth() && role == ADMIN])
}

model User extends IdCreatedUpdated {
    email         String      @unique @email
    emailVerified DateTime?
    password      String?     @password @omit
    name          String?
    spaces        SpaceUser[]
    image         String?     @url
    lists         List[]
    todos         Todo[]
    properties    Property[]
    leases        Lease[]
    dashboards        Dashboard[]
    payments      Payment[]
    charges         Charge[]

    // next-auth
    accounts      Account[]

    // can be created by anyone, even not logged in
    @@allow('create', true)

    // can be read by users sharing any space
    @@allow('read', spaces?[space.members?[user == auth()]])

    // full access by oneself
    @@allow('all', auth() == this)
}

abstract model Owner {
    owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId   String   @default(auth().id)
    @@deny('update', future().owner != owner)
}

abstract model IdCreatedUpdatedSpaceOwnerPrivate extends IdCreatedUpdatedSpace, Owner {
    private   Boolean  @default(false)

    // can be read by owner or space members (only if not private) 
    @@allow('read', owner == auth() || (space.members?[user == auth()] && !private))

    // when create, owner must be set to current user, and user must be in the space
    @@allow('create', owner == auth() && space.members?[user == auth()])

    // when create, owner must be set to current user, and user must be in the space
    @@allow('update', owner == auth() && space.members?[user == auth()])

    // can be deleted by owner
    @@allow('delete', owner == auth())
}

model List extends IdCreatedUpdatedSpaceOwnerPrivate {
    title     String   @length(1, 100)
    todos     Todo[]
}

abstract model IdCreatedUpdatedAuthOwner extends IdCreatedUpdatedAuth, Owner {
}
model Todo extends IdCreatedUpdatedAuthOwner {
    list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId      String
    title       String    @length(1, 100)
    completedAt DateTime?

    // owner has full access, also space members have full access (if the parent List is not private)
    @@allow('all', list.owner == auth())
    @@allow('all', list.space.members?[user == auth()] && !list.private)
}

/*
 * Model for a property
 */
model Property extends IdCreatedUpdatedSpaceOwnerPrivate {
    type        PropertyType
    address     String
    city        String
    postalCode  String
    country     String
    leases      Lease[]
    charges     Charge[]
}

abstract model IdCreatedUpdatedAuthOwnerProperty extends IdCreatedUpdatedAuthOwner {

    property    Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    propertyId  String
    @@allow('all', property.owner == auth())
    @@allow('all', property.space.members?[user == auth()] && !property.private)
}
model Lease extends IdCreatedUpdatedAuthOwnerProperty {
    startDate   DateTime
    endDate     DateTime?
    rentAmount  BigInt
    payments    Payment[]
    charges     Charge[]
}

model Payment extends IdCreatedUpdatedAuthOwner {
    lease       Lease      @relation(fields: [leaseId], references: [id], onDelete: Cascade)
    leaseId     String
    amount      BigInt
    date        DateTime

    @@allow('all', lease.property.owner == auth())
    @@allow('all', lease.property.space.members?[user == auth()] && !lease.property.private)
}

model Charge  extends IdCreatedUpdatedAuthOwnerProperty {
    lease       Lease?     @relation(fields: [leaseId], references: [id], onDelete: Cascade)
    leaseId     String?
    type        ChargeType
    amount      BigInt
    dueDate     DateTime
    description String?
}

// next-auth
model Account {
    id                       String  @id @default(uuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    refresh_token_expires_in Int?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}




model Dashboard extends IdCreatedUpdatedSpaceOwnerPrivate {
    title     String   @length(1, 100)
    panelRows     PanelRow[]
}




model PanelRow {
    id          String    @id @default(uuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    dashboard        Dashboard      @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
    dashboardId      String
    title       String    @length(1, 100)
    panels     Panel[]

    @@deny('all', auth() == null)

    @@allow('all', dashboard.owner == auth())
    @@allow('all', dashboard.space.members?[user == auth()] && !dashboard.private)
}



model Panel {
    id          String    @id @default(uuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    panelRow        PanelRow      @relation(fields: [panelRowId], references: [id], onDelete: Cascade)
    panelRowId      String
    title       String    @length(1, 100)
    panelComponents     PanelComponent[]

    @@deny('all', auth() == null)

    @@allow('all', panelRow.dashboard.owner == auth())
    @@allow('all', panelRow.dashboard.space.members?[user == auth()] && !panelRow.dashboard.private)
}


enum PanelComponentType {
    COUNTER
    REPORT
    VIEW
    CONVERSATION
}


model PanelComponent
{
    id          String    @id @default(uuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    panel        Panel      @relation(fields: [panelId], references: [id], onDelete: Cascade)
    panelId      String
    title       String    @length(1, 100)
    type        PanelComponentType

    @@deny('all', auth() == null)

    @@allow('all', panel.panelRow.dashboard.owner == auth())
    @@allow('all', panel.panelRow.dashboard.space.members?[user == auth()] && !panel.panelRow.dashboard.private)
}
